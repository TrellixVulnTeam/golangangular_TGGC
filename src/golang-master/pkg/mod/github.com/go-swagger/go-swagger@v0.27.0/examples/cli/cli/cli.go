// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"log"

	"github.com/go-swagger/go-swagger/examples/cli/client"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/spf13/cobra"
)

// debug flag indicating that cli should output debug logs
var debug bool

// logDebugf writes debug log to stdout
func logDebugf(format string, v ...interface{}) {
	if !debug {
		return
	}
	log.Printf(format, v...)
}

// makeClient constructs a client object
func makeClient(cmd *cobra.Command, args []string) (*client.AToDoListApplication, error) {
	hostname, err := cmd.Flags().GetString("hostname")
	if err != nil {
		return nil, err
	}
	scheme, err := cmd.Flags().GetString("scheme")
	if err != nil {
		return nil, err
	}

	r := httptransport.New(hostname, client.DefaultBasePath, []string{scheme})
	// set custom producer and consumer to use the default ones

	r.Consumers["application/io.goswagger.examples.todo-list.v1+json"] = runtime.JSONConsumer()

	r.Producers["application/io.goswagger.examples.todo-list.v1+json"] = runtime.JSONProducer()

	auth, err := makeAuthInfoWriter(cmd)
	if err != nil {
		return nil, err
	}
	r.DefaultAuthentication = auth

	appCli := client.New(r, strfmt.Default)
	logDebugf("Server url: %v://%v", scheme, hostname)
	return appCli, nil
}

// MakeRootCmd returns the root cmd
func MakeRootCmd() (*cobra.Command, error) {
	rootCmd := &cobra.Command{
		Use: "AToDoListApplication",
	}
	// register basic flags
	rootCmd.PersistentFlags().String("hostname", client.DefaultHost, "hostname of the service")
	rootCmd.PersistentFlags().String("scheme", client.DefaultSchemes[0], fmt.Sprintf("Choose from: %v", client.DefaultSchemes))

	// configure debug flag
	rootCmd.PersistentFlags().BoolVar(&debug, "debug", false, "output debug logs")

	// register security flags
	/* */
	rootCmd.PersistentFlags().String("x-todolist-token", "none", ``)
	// add all operation groups
	operationGroupTodosCmd, err := makeOperationGroupTodosCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupTodosCmd)

	return rootCmd, nil
}

// makeAuthInfoWriter retrieves cmd flags and construct an auth info writer
func makeAuthInfoWriter(cmd *cobra.Command) (runtime.ClientAuthInfoWriter, error) {
	/* */
	key, err := cmd.Flags().GetString("x-todolist-token")
	if err != nil {
		return nil, err
	}
	return httptransport.APIKeyAuth("x-todolist-token", "header", key), nil
}

func makeOperationGroupTodosCmd() (*cobra.Command, error) {
	operationGroupTodosCmd := &cobra.Command{
		Use:  "todos",
		Long: ``,
	}

	operationAddOneCmd, err := makeOperationTodosAddOneCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTodosCmd.AddCommand(operationAddOneCmd)

	operationDestroyOneCmd, err := makeOperationTodosDestroyOneCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTodosCmd.AddCommand(operationDestroyOneCmd)

	operationFindTodosCmd, err := makeOperationTodosFindTodosCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTodosCmd.AddCommand(operationFindTodosCmd)

	operationUpdateOneCmd, err := makeOperationTodosUpdateOneCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTodosCmd.AddCommand(operationUpdateOneCmd)

	return operationGroupTodosCmd, nil
}
